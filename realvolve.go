// Package realvolve is a simple and limited client to Realvolve API
//
// http://go.realvolve.com/api
//
package realvolve

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

const DefaultURL = "https://start.realvolve.com"

var httpcli = &http.Client{Timeout: 3 * time.Second}

// ErrUnauthorized is returned on status 401
type ErrUnauthorized struct {
	Body string
}

func (err *ErrUnauthorized) Error() string {
	return fmt.Sprintf("401 Unauthorized %v", err.Body)
}

// Realvolve API client
//
// http://go.realvolve.com/api
type Realvolve struct {
	URL string // defaults to DefaultURL

	// AccessToken as generated by Realvolve using an API request
	//
	// http://go.realvolve.com/api#RequestAccessToken
	AccessToken string

	// UtilityKey is available per client in their Dashboard. Click Settings
	// then Integrations, it's at the bottom of the page
	UtilityKey string
}

// AddContact creates a new contact in Realvolve
//
// Fields accepted to create a contact are: FirstName, LastName,
// HomeEmail, WorkEmail, HomePhone and WorkPhone
//
// On success a new Contact object is returned with fields: ID,
// FirstName and LastName
func (rv *Realvolve) AddContact(c Contact) (created Contact, err error) {
	resp, err := rv.post("/utility_api/v1/contacts", c.Values())
	return resp.Contact, err
}

// UpdateContact updates an existing contact in Realvolve
//
// ID field of Contact provided is required
//
// Fields accepted to update are: FirstName, LastName,
// HomeEmail, WorkEmail, HomePhone and WorkPhone
func (rv *Realvolve) UpdateContact(c Contact) error {
	if c.ID == 0 {
		return errors.New("realvolve: Contact.ID is required to EditContact")
	}
	data := c.Values()
	data.Set("contact_id", strconv.Itoa(c.ID))
	_, err := rv.post("/utility_api/v1/contacts/update_contact", data)
	return err
}

func (rv *Realvolve) AddNote(contactID int, note string) error {
	data := url.Values{}
	data.Set("contact_id", strconv.Itoa(contactID))
	data.Set("note_content", note)
	_, err := rv.post("/utility_api/v1/contacts/add_note", data)
	return err
}

func (rv *Realvolve) post(path string, data url.Values) (Response, error) {
	if rv.URL == "" {
		rv.URL = DefaultURL
	}
	data.Set("utility_api_key", rv.UtilityKey)

	req, err := http.NewRequest("POST", rv.URL+path, strings.NewReader(data.Encode()))
	if err != nil {
		return Response{}, err
	}
	req.Header.Set("Authorization", "Bearer "+rv.AccessToken)
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := httpcli.Do(req)
	if err != nil {
		return Response{}, err
	}
	defer resp.Body.Close()

	respbody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return Response{}, err
	}
	if resp.StatusCode == 401 {
		return Response{}, &ErrUnauthorized{Body: string(respbody)}
	}
	var respinfo Response
	if err := json.Unmarshal(respbody, &respinfo); err != nil {
		return Response{}, fmt.Errorf("realvolve: POST %s %v returned %d and body failed to decode (%v) '%v'", path, string(data.Encode()), resp.StatusCode, err, string(respbody))
	}
	if !respinfo.Success {
		return Response{}, fmt.Errorf("realvolve: POST %s %v returned %d and body '%v'", path, string(data.Encode()), resp.StatusCode, string(respbody))
	}
	return respinfo, nil
}

// Contact in Realvolve
type Contact struct {
	ID        int    `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	HomeEmail string
	WorkEmail string
	HomePhone string
	WorkPhone string
}

// Values return a map of values ready to be sent when creating
// a contact
func (c Contact) Values() url.Values {
	vals := url.Values{}
	vals.Set("contact[primary][first_name]", c.FirstName)
	vals.Set("contact[primary][last_name]", c.LastName)
	if c.HomeEmail != "" {
		vals.Set("contact[details][email_address][home_email]", c.HomeEmail)
	}
	if c.WorkEmail != "" {
		vals.Set("contact[details][email_address][work_email]", c.WorkEmail)
	}
	if c.HomePhone != "" {
		vals.Set("contact[details][phone_number][home_phone]", c.HomePhone)
	}
	if c.WorkPhone != "" {
		vals.Set("contact[details][phone_number][work_phone]", c.WorkPhone)
	}
	return vals
}

type Response struct {
	Success bool    `json:"success"`
	Message string  `json:"msg"`
	Contact Contact `json:"contact"`
}
